type Report @model @auth(rules: [{allow: public}]) {
  id: ID!
  fileUrl: String
  fileName: String
  fileType: String
  createdAt: AWSDateTime
  userID: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  appointmentID: ID @index(name: "byAppointment")
  healthConcernID: ID @index(name: "byHealthConcern")
}

type Notification @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID @index(name: "byUser")
  expertID: ID @index(name: "byExpert")
  title: String
  body: String
  type: String
  fcmToken: String
  isSent: Boolean
  isRead: Boolean
}

type Appointment @model @auth(rules: [{allow: public}]) {
  id: ID!
  concernType: ConcernType
  concernStatus: ConcernStatus
  appointmentDateTime: AWSDateTime
  startTime: String!
  endTime: String!
  status: String
  location: String
  meetingLink: String
  phoneNumber: String
  title: String
  description: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  healthConcernID: ID @index(name: "byHealthConcern")
  expertID: ID! @index(name: "byExpert")
  reports: [Report] @hasMany(indexName: "byAppointment", fields: ["id"])  
  expert: Expert @belongsTo(fields: ["expertID"])
  userId: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userId"])

}

enum ConcernType {
  TEXT
  IN_CLINIC
  AUDIO_CALL
  VIDEO_CALL
}

enum Specialization {
  CARDIOLOGIST
  PEDIATRICIAN
  GYNECOLOGIST
  ORTHOPEDIC
  DERMATOLOGIST
  NEUROLOGIST
  GENERAL_PHYSICIAN
  ENT_SPECIALIST
  PSYCHIATRIST
  DIABETOLOGIST
  DIETICIAN
}

type Article @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String
  content: String
  imageUrl: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  expertID: ID @index(name: "byExpert")
  expert: Expert @belongsTo(fields: ["expertID"])
}

enum ProfileStatus {
  PENDING
  PUBLISHED
  REJECTED
}

type Review @model @auth(rules: [{allow: public}]) {
  id: ID!
  responseId: String!
  rating: Float!
  feedback: String
  createdAt: AWSDateTime
  userID: ID! @index(name: "byUser")
  expertID: ID! @index(name: "byExpert")
}

enum ResponseStatus {
  DRAFT
  SUBMITTED
  REVIEWED
}

type Response @model @auth(rules: [{allow: public}]) {
  id: ID!
  responseText: String
  responseStatus: ResponseStatus
  createdAt: AWSDateTime
  healthconcernID: ID! @index(name: "byHealthConcern")
  expertID: ID! @index(name: "byExpert")
  ResponseReview: Review @hasOne
}

type TimeSlot {
  startTime: String!
  endTime: String!
}

type DaySchedule {
  dayOfWeek: Int!
  inClinicSlots: [TimeSlot]
  audioCallSlots: [TimeSlot]
  videoCallSlots: [TimeSlot]
  breakSlots: [TimeSlot]
  isAvailable: Boolean
}

type Expert @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail!
  mobile: String
  education: String
  introduction: String
  profilePictureUrl: String
  experience: String
  averageRating: Float
  totalReviews: Int
  weeklySchedule: [DaySchedule]
  Specialization: Specialization
  ConsultationFee: Int
  LanguageSpoken: String
  clinicLocation: String  
  firebaseToken: String
  appointments: [Appointment] @hasMany(indexName: "byExpert", fields: ["id"])
  ExpertResponse: [Response] @hasMany(indexName: "byExpert", fields: ["id"])
  ExpertReview: [Review] @hasMany(indexName: "byExpert", fields: ["id"])
  profileStatus: ProfileStatus
  ExpertArticles: [Article] @hasMany(indexName: "byExpert", fields: ["id"])
  HealthConcerns: [HealthConcern] @hasMany(indexName: "byExpert", fields: ["id"])
  Notifications: [Notification] @hasMany(indexName: "byExpert", fields: ["id"])
}

enum ConcernStatus {
  PENDING
  ANSWERED
  CLOSED
}

type HealthConcern @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  description: String!
  concernStatus: ConcernStatus
  attachments: String
  createdAt: AWSDateTime
  userID: ID! @index(name: "byUser")  
  preferredDate: AWSDate
  preferredTimeSlot: String
  user: User @belongsTo(fields: ["userID"])
  HealthConcernResponses: [Response] @hasMany(indexName: "byHealthConcern", fields: ["id"])
  expertId: ID @index(name: "byExpert")
  Expert: Expert @belongsTo(fields: ["expertId"])
  concernType: ConcernType
  reports: [Report] @hasMany(indexName: "byHealthConcern", fields: ["id"])
}

type FamilyMember @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String
  lastName: String
  weight: Float
  height: Float
  dob: AWSDate
  relation: String
  userID: ID! @index(name: "byUser")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  dob: AWSDate
  mobile: String
  address: String
  height: Float
  weight: Float
  firebaseToken: String
  subscriptionStatus: SubscriptionStatus
  UserFamilyMembers: [FamilyMember] @hasMany(indexName: "byUser", fields: ["id"])
  UserHealthConcerns: [HealthConcern] @hasMany(indexName: "byUser", fields: ["id"])
  UserReviews: [Review] @hasMany(indexName: "byUser", fields: ["id"])
  profilePictureUrl: String
  profileStatus: ProfileStatus
  UserReports: [Report] @hasMany(indexName: "byUser", fields: ["id"])  
  appointments: [Appointment] @hasMany(indexName: "byUser", fields: ["id"])  
  Notifications: [Notification] @hasMany(indexName: "byUser", fields: ["id"])
}
 